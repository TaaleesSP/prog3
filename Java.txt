----- Aula 1 -----

- Independencia 
- JDK (Java Development Kit) "Compiler, Debugger, Javadoc, keytooL" , JRE(Java Runtime Environment) "JVM + Class Libraries" e JVM
- Ambientes de desenvolvimento Java
    - compilador, interpretador, JDK
    - .java é o que criaremos, e o .class
    - ( Javac exemplo.java -> exemplo.class ) -> ( java exemplo ) que é o exemplo.class 
- Variaveis e Constante
	- O tipo de variavel define, além do tipo de dado que ela pode armazenar, o tamanho do espaço de memoria.
	- tipos de dados ( char, int .. ) 
- Conversões entre tipos primitivos
	 - inteiro a uma variavel double e etc... 
	 - Nesse caso a conversão é direta ( chamada de conversão implicita)
	 - (casted) como um numero inteiro .. Conversão explicita 
	 - Operadores ( +, -, *, /, --, ++, % ),( ==, >, <. >=, <=, != ),(&&, ||, !"NÃO" )
- FUNÇÕES E CONSTANTES MATEMÁTICAS
	- Math.sqrt(x); //raiz quadrada ... e etc.. 

- Comandos de decisão ou seleção
	- if, if...else, switch ... 
- Comandos de repetição
	- while, do ... 
- Escopo de variáveis
	- dentro só existirão até o fim daquele bloco ou seja até o ponto onde se fecham as chaves do bloco
	- while.....
		int y = 0 ... 
- Vetores e matrizes
	 - tipos primitivos ou de objetos 
	 	 - int numeros[] = new int[3];
	 	 numeros[0] = 57;
	 	 numeros[1] = 51;
	 	 numeros[3] = 37;
	 	 
	- matrizes
		int matriz[][] = new int[10][10];
		matriz[9][9] = -3;
		....

----- Aula 2 -----

	- Conceitos básicos
	 Estado: conjunto de propriedades de um objeto ( valores dos atributos)
	 Comportamento: conjunto de ações possiveis sobre o objeto (metodos da classe)
	 Unicidade: todo objetivo é único ( possui um endereço de memoria! )
	 
	- Classe
	 Classe: define as caracteristicas e o comportamento de um conjunto de objetos.
	 Classe ela vai definir tudo o que contém nesse objeto. 
	
	" Classe Pessoa " = id, nome, idade, cidade, genero
			  = cadastrar(), getNome(), setNome(), getSexo(), setSexo()
			  
	- Objeto : É a criação de uma instância da classe.
	- Pacotes: Em Java são uma maneira de agrupar classes e interfaces relacionadas. 
	
	- Classes em java
		ex: import pacote1.ClassePublica;
		    import pacote1.ClassePrivada;
		    
		    public class ClasseOutroPacote{
		    {
		    	ClassePublica obj1;
		    	ClassePrivada obj2; //Apresenta erro pois não pode ser visualizada!
		    	
	- Declaração de atributos e métodos:
	 - Utilização de Objetos - Declaração de vaviavel. 
	
		package exemplos;
		public class Programa{
			public static void main(String[] args) {
				Conta c;
				c = new Conta();
				c.nome_titular="Jao";
				.....
				
		outro:
		
		package exemplos;
		public class Programa{
			public static void main(String[] args){
				Conta c= new Conta();
				c.depositar(200);
				boolean saque_efetuado = c.sacar(250);
				if (saque_efetuado)
					System.out.println("Saque Efetuado com Sucesso!");
				else
					System.out.println("Saque nao efetuado! Saldo insuficiente@!");
					
	- Atributos e métodos estáticos: 
		- contém informações inerentes a uma classe e não  aum objeto em especifico. Por isso são conhecidos também como atributos ou variáveis de classe.
		
	- Classe String : Para criar uma instância de String, não precisamos utilizar o operador new, como acontece com as outras classes. Como concatenar ? ( Usando o + ) , para comparar usamos o "equals" e não o "==" .
	

---- Aula 3 -----

	- Construtores na ultima aula 
	- Destrutores ( não muito usado ) 
	- Encapsulamento, ela restringe o acesso a variáveis (atributos), metodos ou até a propria classe. Ela serve para que não seja permitido acessarmos diretamente as propriedades de um Objeto. "public, private, protected".
	Ex: 
	
	package exemplo;
	public class Conta{
		private int numero; 
		.....
		
	public void depositar (double valor) {
		this.saldo = this.getSaldo() = valor;
		
	}

- Herança "especialização", "generalização".
- Polimorfismo (permite escrever programas que processam objetos eque compartilham a mesma superclasse "Direta ou indiretamente" 
- Sobrescrita
- Sobrecarga(Prova), o que diferencia "Parametro".
- Classe Object: Ex: toString() esse método indica como transformar um objeto de uma classe em um string.
	@Override
	
	public String to String(){
		return("Conta: " + this.numero);
	}
	
	ex: getClass "Muito utilizado quando se trabalha na criação de ferramentas geradoras de códigos, sendo assim retorna a classe de um objeto" e equals() esse metodo possibilita comparar os valors de dois objetos. Se consideramos esses objetos iguais, devemos retornar true, diferentes devemos retornar false.
	
	
